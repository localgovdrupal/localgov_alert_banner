<?php

/**
 * @file
 * Contains localgov_alert_banner.module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function localgov_alert_banner_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the localgov_alert_banner module.
    case 'help.page.localgov_alert_banner':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Alert Banner Support module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_localgov_alert_banner().
 */
function localgov_alert_banner_preprocess(&$variables) {

  if (isset($variables['elements']['#localgov_alert_banner'])) {

    // Get token.
    $token = $variables['elements']['#localgov_alert_banner']->getToken();

    // Add a hidden class.
    $variables['attributes']['class'][] = 'hidden';

    // Token as attribute.
    $variables['attributes']['data-dismiss-alert-token'] = $token;

  }
}

/**
 * Implements hook_theme().
 */
function localgov_alert_banner_theme() {
  $theme = [];
  $theme['localgov_alert_banner'] = [
    'render element' => 'elements',
    'file' => 'localgov_alert_banner.page.inc',
    'template' => 'localgov-alert-banner',
  ];
  $theme['localgov_alert_banner_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'localgov_alert_banner.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function localgov_alert_banner_theme_suggestions_localgov_alert_banner(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#localgov_alert_banner'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'localgov_alert_banner__' . $sanitized_view_mode;
  $suggestions[] = 'localgov_alert_banner__' . $entity->bundle();
  $suggestions[] = 'localgov_alert_banner__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'localgov_alert_banner__' . $entity->id();
  $suggestions[] = 'localgov_alert_banner__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_modules_installed().
 */
function localgov_alert_banner_modules_installed($modules, $is_syncing) {

  // Configure scheduled transitions if it's being installed.
  if (in_array('scheduled_transitions', $modules)) {
    localgov_alert_banner_configure_scheduled_transitions();
  }
}

/**
 * Configure scheduled transitions.
 */
function localgov_alert_banner_configure_scheduled_transitions() {

  // Configure scheduled transitions for alert banners.
  $scheduled_transitions_config = \Drupal::service('config.factory')->getEditable('scheduled_transitions.settings');
  $alert_banner_bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo('localgov_alert_banner');
  $bundles = $scheduled_transitions_config->get('bundles');
  foreach ($alert_banner_bundles as $bundle => $info) {
    $bundles[] = [
      'entity_type' => 'localgov_alert_banner',
      'bundle' => $bundle,
    ];
  }
  $scheduled_transitions_config->set('bundles', $bundles);
  $scheduled_transitions_config->save();
  Cache::invalidateTags([
    'scheduled_transition_settings',
    'config:scheduled_transitions.settings',
  ]);

  // Add scheduling permissions to the emergency publisher user.
  $permissions = [];
  foreach ($alert_banner_bundles as $bundle => $info) {
    $permissions = array_merge($permissions, [
      'add scheduled transitions localgov_alert_banner ' . $bundle,
      'reschedule scheduled transitions localgov_alert_banner ' . $bundle,
      'view scheduled transitions localgov_alert_banner ' . $bundle,
    ]);
  }
  user_role_grant_permissions('emergency_publisher', $permissions);
}
